import asyncio

from apscheduler.job import Job
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram import Bot

from datetime import datetime, timedelta
from aiogram import Bot
from aiogram.types import BotCommand
from aiogram.fsm.state import State, StatesGroup


class FSMContextClass(StatesGroup):
    # –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
    menu = State()

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞
    fill_title = State()
    fill_text = State()
    fill_deadline_end = State()

    edit_title = State()
    edit_text = State()
    extend_deadline = State()
    note_id = State()


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
MENU_MAIN = "main"
MENU_CREATE = "create"
MENU_VIEW = "view"
MENU_EDIT = "edit"


def create_text_of_notes(notes, page=0):
    result = "üìå <b>–í–∞—à–∏ –¥–µ–¥–ª–∞–π–Ω—ã:</b>\n\n"
    notes = notes[page*4:min(len(notes), page*4+4)]
    for note in notes:
        deadline_str = note.data_end.strftime("%d.%m.%Y %H:%M")
        title = note.note_title
        text = note.note_text if note.note_text else "<–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è>"
        is_done = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ!" if note.is_completed else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!"
        result += (f"üìò <b>{title}</b>\n{text[:50]}{'...' if len(text) > 50 else ''}\nüìÖ –î–æ: {deadline_str}\n\n"
                   f"{is_done}\n\n")

    return result


def get_note_text(note):
    deadline_str = note.data_end.strftime("%d.%m.%Y %H:%M")
    is_done = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if note.is_completed else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
    return (f"üìò <b>{note.note_title}</b>\n\n"
            f"üìî {note.note_text}\n\n"
            f"üìÖ {deadline_str}\n\n"
            f"{is_done}")

